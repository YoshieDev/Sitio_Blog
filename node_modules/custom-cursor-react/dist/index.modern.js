import React, { useRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import { gsap } from 'gsap';

var addHoverEvent = function addHoverEvent(cursor, targets) {
  if (!targets) return;

  if (Array.isArray(targets)) {
    targets.forEach(function (target) {
      [].forEach.call(document.querySelectorAll(target), function (el) {
        el.addEventListener('mouseenter', cursor.enter);
        el.addEventListener('mouseleave', cursor.leave);
      });
    });
  } else {
    [].forEach.call(document.querySelectorAll(targets), function (el) {
      el.addEventListener('mouseenter', cursor.enter);
      el.addEventListener('mouseleave', cursor.leave);
    });
  }
};

var removeHoverEvent = function removeHoverEvent(cursor, targets) {
  if (!targets) return;

  if (Array.isArray(targets)) {
    targets.forEach(function (target) {
      [].forEach.call(document.querySelectorAll(target), function (el) {
        el.removeEventListener('mouseenter', cursor.enter);
        el.removeEventListener('mouseleave', cursor.leave);
      });
    });
  } else {
    [].forEach.call(document.querySelectorAll(targets), function (el) {
      el.removeEventListener('mouseenter', cursor.enter);
      el.removeEventListener('mouseleave', cursor.leave);
    });
  }
};

var handleWindowEvent = function handleWindowEvent(cursor) {
  document.body.addEventListener('mouseleave', cursor.hide);
  document.body.addEventListener('mouseenter', cursor.show);
};

var removeWindowEvent = function removeWindowEvent(cursor) {
  document.body.removeEventListener('mouseleave', cursor.hide);
  document.body.removeEventListener('mouseenter', cursor.show);
};

var lerp = function lerp(a, b, n) {
  return (1 - n) * a + n * b;
};

var getMousePos = function getMousePos(e) {
  var posX = 0;
  var posY = 0;
  if (!e) e = window.event;
  posX = e.clientX;
  posY = e.clientY;
  return {
    x: posX,
    y: posY
  };
};

var Cursor = /*#__PURE__*/function () {
  function Cursor(el, smoothness, opacity, targetOpacity, targetScale) {
    var _this = this;

    this.bindAll();
    this.DOM = {
      el: el
    };
    this.bounds = this.DOM.el.getBoundingClientRect();
    this.renderedStyles = {
      tx: {
        previous: 0,
        current: 0,
        amt: smoothness.movement || smoothness
      },
      ty: {
        previous: 0,
        current: 0,
        amt: smoothness.movement || smoothness
      },
      scale: {
        previous: 1,
        current: 1,
        amt: smoothness.scale || smoothness
      },
      opacity: {
        previous: 1,
        current: opacity,
        amt: smoothness.opacity || smoothness
      }
    };
    this.isVisible = true;
    this.opacity = opacity;
    this.targetProps = {
      opacity: targetOpacity,
      scale: targetScale
    };
    this.mouse = {
      x: 0,
      y: 0
    };
    window.addEventListener('mousemove', this.getPos);

    this.onMouseMoveEv = function () {
      _this.renderedStyles.tx.current = _this.mouse.x - _this.bounds.width / 2;
      _this.renderedStyles.tx.previous = _this.renderedStyles.tx.current;
      _this.renderedStyles.ty.current = _this.mouse.y - _this.bounds.height / 2;
      _this.renderedStyles.ty.previous = _this.renderedStyles.ty.current;
      gsap.to(_this.DOM.el, {
        duration: 0.3,
        ease: 'Power3.easeOut',
        opacity: _this.opacity
      });
      requestAnimationFrame(function () {
        return _this.render();
      });
      window.removeEventListener('mousemove', _this.onMouseMoveEv);
    };

    window.addEventListener('mousemove', this.onMouseMoveEv);
  }

  var _proto = Cursor.prototype;

  _proto.bindAll = function bindAll() {
    var _this2 = this;

    ['enter', 'leave', 'hide', 'show', 'getPos'].forEach(function (fn) {
      _this2[fn] = _this2[fn].bind(_this2);
    });
  };

  _proto.getPos = function getPos(ev) {
    this.mouse = getMousePos(ev);
  };

  _proto.enter = function enter() {
    this.renderedStyles.scale.current = this.targetProps.scale;
    this.renderedStyles.opacity.current = this.targetProps.opacity;
  };

  _proto.leave = function leave() {
    this.renderedStyles.scale.current = 1;
    this.renderedStyles.opacity.current = this.opacity;
  };

  _proto.hide = function hide(ev) {
    if (!ev.relatedTarget && !ev.toElement) {
      this.isVisible = false;
      gsap.to(this.DOM.el, {
        duration: 0.5,
        ease: 'Power3.easeOut',
        opacity: 0
      });
    }
  };

  _proto.show = function show() {
    var _this3 = this;

    this.isVisible = true;
    requestAnimationFrame(function () {
      return _this3.render();
    });
    gsap.to(this.DOM.el, {
      duration: 0.3,
      ease: 'Power3.easeOut',
      opacity: this.opacity
    });
  };

  _proto.destroy = function destroy() {
    this.isVisible = false;
    window.removeEventListener('mousemove', this.getPos);
  };

  _proto.render = function render() {
    var _this4 = this;

    this.renderedStyles.tx.current = this.mouse.x - this.bounds.width / 2;
    this.renderedStyles.ty.current = this.mouse.y - this.bounds.height / 2;
    Object.keys(this.renderedStyles).forEach(function (key) {
      _this4.renderedStyles[key].previous = lerp(_this4.renderedStyles[key].previous, _this4.renderedStyles[key].current, _this4.renderedStyles[key].amt);
    });
    this.DOM.el.style.transform = "translate3d(" + this.renderedStyles.tx.previous + "px, " + this.renderedStyles.ty.previous + "px, 0) scale(" + this.renderedStyles.scale.previous + ")";
    this.DOM.el.style.opacity = String(this.renderedStyles.opacity.previous);

    if (this.isVisible) {
      requestAnimationFrame(function () {
        return _this4.render();
      });
    }
  };

  return Cursor;
}();

var styles = {"cursor":"_12c4J"};

var CustomCursor = function CustomCursor(_ref) {
  var targets = _ref.targets,
      customClass = _ref.customClass,
      fill = _ref.fill,
      smoothness = _ref.smoothness,
      strokeColor = _ref.strokeColor,
      strokeWidth = _ref.strokeWidth,
      dimensions = _ref.dimensions,
      opacity = _ref.opacity,
      targetOpacity = _ref.targetOpacity,
      targetScale = _ref.targetScale;
  var ref = useRef(null);
  useEffect(function () {
    if (!ref) return null;
    var cursor = new Cursor(ref.current, smoothness, opacity, targetOpacity, targetScale);
    addHoverEvent(cursor, targets);
    handleWindowEvent(cursor);
    return function () {
      removeHoverEvent(cursor, targets);
      removeWindowEvent(cursor);
      cursor.destroy();
    };
  }, [opacity, ref, smoothness, targetOpacity, targetScale, targets]);
  return /*#__PURE__*/React.createElement("div", {
    className: styles.cursor
  }, /*#__PURE__*/React.createElement("svg", {
    ref: ref,
    className: customClass,
    height: dimensions,
    width: dimensions,
    viewBox: "0 0 " + dimensions + " " + dimensions
  }, /*#__PURE__*/React.createElement("circle", {
    cx: dimensions / 2,
    cy: dimensions / 2,
    r: dimensions / 2 / 2,
    fill: fill,
    stroke: strokeColor,
    strokeWidth: strokeWidth
  })));
};

CustomCursor.propTypes = {
  targets: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),
  customClass: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),
  smoothness: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    movement: PropTypes.number.isRequired,
    opacity: PropTypes.number.isRequired,
    scale: PropTypes.number.isRequired
  })]),
  fill: PropTypes.string,
  strokeColor: PropTypes.string,
  strokeWidth: PropTypes.number,
  dimensions: PropTypes.number,
  opacity: PropTypes.number,
  targetOpacity: PropTypes.number,
  targetScale: PropTypes.number
};
CustomCursor.defaultProps = {
  targets: '',
  customClass: 'cursor-circle',
  fill: '#000',
  smoothness: 0.2,
  strokeColor: '#000',
  strokeWidth: 0,
  dimensions: 50,
  opacity: 0.5,
  targetOpacity: 1,
  targetScale: 4
};

export default CustomCursor;
//# sourceMappingURL=index.modern.js.map
